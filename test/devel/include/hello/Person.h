// Generated by gencpp from file hello/Person.msg
// DO NOT EDIT!


#ifndef HELLO_MESSAGE_PERSON_H
#define HELLO_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : anme()
    , age(0)
    , height(0.0)  {
    }
  Person_(const ContainerAllocator& _alloc)
    : anme(_alloc)
    , age(0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _anme_type;
  _anme_type anme;

   typedef int32_t _age_type;
  _age_type age;

   typedef float _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::hello::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::hello::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::hello::Person > PersonPtr;
typedef boost::shared_ptr< ::hello::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello::Person_<ContainerAllocator1> & lhs, const ::hello::Person_<ContainerAllocator2> & rhs)
{
  return lhs.anme == rhs.anme &&
    lhs.age == rhs.age &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello::Person_<ContainerAllocator1> & lhs, const ::hello::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hello::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2e2fee813db83ff265842421e1a123e";
  }

  static const char* value(const ::hello::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2e2fee813db83ffULL;
  static const uint64_t static_value2 = 0x265842421e1a123eULL;
};

template<class ContainerAllocator>
struct DataType< ::hello::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello/Person";
  }

  static const char* value(const ::hello::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string anme\n"
"int32 age\n"
"float32 height\n"
"\n"
;
  }

  static const char* value(const ::hello::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.anme);
      stream.next(m.age);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello::Person_<ContainerAllocator>& v)
  {
    s << indent << "anme: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.anme);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_MESSAGE_PERSON_H
